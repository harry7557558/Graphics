#include <stdio.h>
#include "numerical/geometry.h"
#include "triangulate/octatree.h"
#include "ui/stl_encoder.h"

//const float layer1_weights[3][16] = {{-.056,-.149,.094,-.064,-.229,.447,.458,-.208,-.666,.396,.422,.14,.424,-.254,-.159,.084},{-.542,-.366,.093,-.757,-.488,-.471,.039,.67,.211,.456,-.22,.769,.448,.331,.36,.153},{0,.75,-.572,-.408,.02,.609,.566,-.346,-.089,-.243,-.297,.475,-.489,-.179,.488,-.355}};
//const float layer1_biases[16] = {-.048,-.221,.178,.022,.185,.212,.195,.018,.05,.17,.058,.103,.057,.003,-.058,.092};
//const float layer2_weights[16][16] = {{.272,.085,.305,-.368,-.008,-.127,.426,.396,-.511,-.434,.136,-.286,-.302,.042,-.251,-.26},{.22,.136,-.116,.08,-.399,.58,.227,-.091,.062,-.243,.314,-.289,-.166,.178,-.167,-.364},{-.313,-.171,.003,-.099,.171,.244,.447,.046,-.297,-.247,.286,-.479,-.123,.164,.291,-.16},{.419,.011,.282,.283,-.377,-.019,.169,.11,.111,-.045,.42,.201,-.119,.498,-.171,-.219},{.316,-.118,-.115,-.009,.317,.07,-.405,-.423,.458,-.242,.425,.094,.055,.104,.05,.185},{.307,.332,.486,-.341,-.175,-.089,.46,-.142,-.154,.26,-.381,-.075,-.391,-.11,.294,.429},{.179,.169,-.04,.153,.278,-.406,.451,.307,.181,-.074,-.015,-.221,-.523,-.488,-.162,.243},{-.281,-.018,-.189,-.243,-.061,-.278,.143,.318,-.077,.45,.457,-.049,.287,.036,.562,-.293},{-.171,.459,-.247,.112,-.19,.49,-.3,-.236,-.449,-.345,.356,.273,-.15,-.232,.432,.368},{.123,.087,-.202,.107,-.169,.134,.345,-.041,.345,.321,-.165,-.037,.386,.243,.239,.298},{-.283,.018,.24,.083,-.223,-.413,.036,-.443,-.289,-.042,.387,-.385,-.095,.275,.127,-.089},{.382,-.437,-.349,.285,.352,-.554,-.331,-.064,-.313,-.341,-.14,-.001,-.421,.187,-.194,.119},{.156,-.117,-.236,-.607,-.145,-.14,-.035,-.498,.045,-.449,.158,.395,.144,-.181,-.036,.222},{-.076,-.244,.114,.254,-.161,.392,.064,-.002,.243,-.235,.405,.129,.351,.094,.173,-.419},{-.04,-.349,-.398,-.196,.105,.282,-.354,.404,.277,-.377,-.277,-.429,-.077,.258,.373,-.123},{-.114,-.535,-.11,-.04,-.226,-.211,-.175,.184,.267,.343,-.281,-.495,-.312,-.339,-.022,-.078}};
//const float layer2_biases[16] = {.106,-.167,-.129,.045,.082,.197,-.213,-.015,.004,.163,.164,.216,-.077,.014,-.073,-.003};
//const float layer3_weights[16][16] = {{-.079,-.354,-.361,-.305,-.027,.209,.303,-.256,-.134,.415,.118,-.041,.247,-.481,.166,.025},{.152,-.014,.454,-.26,.204,-.438,-.193,-.013,.118,-.184,-.124,.405,.264,-.561,-.589,-.281},{.106,-.136,.12,.371,.31,-.344,.329,-.091,.148,-.292,.291,-.246,.442,-.296,.075,-.051},{.174,-.131,.195,-.027,-.264,.057,.34,-.147,-.458,.154,-.455,-.104,.435,-.294,.331,-.29},{.078,-.054,.283,.207,-.382,.229,.308,-.488,-.025,-.113,-.117,-.056,.18,.186,.201,.146},{.128,-.135,-.165,.009,.35,-.163,-.231,.469,.127,.253,.623,-.502,.281,.178,.272,-.348},{-.367,.218,.3,-.063,-.104,.236,-.017,-.42,.136,.26,.061,-.244,.207,.049,-.029,.672},{.281,.3,-.002,.311,.229,.241,.272,.174,-.108,.059,-.112,-.126,-.097,.398,.332,-.341},{.096,-.141,.082,-.411,-.01,.382,.289,-.007,-.27,.191,.301,-.127,.05,.186,.193,.152},{.369,-.008,.324,-.333,-.066,-.089,-.329,.272,.202,-.002,-.321,.288,-.17,.377,-.138,.251},{-.217,.022,-.366,-.409,.36,-.051,.208,-.287,.116,-.236,.097,.22,.475,.301,.135,.247},{.381,.398,.247,-.052,-.165,.386,-.233,.305,-.389,.326,.175,-.354,.165,.241,-.452,-.403},{-.073,.305,-.14,-.299,.066,-.226,.404,-.022,.294,-.205,-.422,.45,.04,-.064,.073,.417},{-.174,-.274,-.096,.422,.032,.028,.344,.141,-.514,.179,.384,.101,-.172,.256,.113,-.11},{.38,-.294,-.44,.104,-.007,.49,-.15,-.169,-.073,.078,.241,-.022,.489,-.148,-.199,.344},{.389,.008,-.002,.194,-.327,.219,.219,.33,-.305,-.364,-.004,-.011,.272,.201,-.215,.096}};
//const float layer3_biases[16] = {-.075,-.04,.141,.018,.028,-.115,.022,.063,.26,.09,-.094,.204,-.146,.176,-.122,-.186};
//const float layer4_weights[16][1] = {{.439},{-.117},{.481},{-.145},{-.569},{.872},{.216},{-.47},{-.78},{.18},{.613},{-.546},{.538},{.601},{.739},{.454}};
//const float layer4_biases[1] = {-.26};

#include "bunny_weights.txt"

float activate(float x) {
	//return max(x, 0.0f);
	return sin(x);
}

float fun(vec3 p) {
	float input[3] = { p.x, p.y, p.z };

	float layer1[16];
	for (int i = 0; i < 16; i++) {
		float s = layer1_biases[i];
		for (int j = 0; j < 3; j++) s += layer1_weights[j][i] * input[j];
		layer1[i] = activate(s);
	}

	float layer2[16];
	for (int i = 0; i < 16; i++) {
		float s = layer2_biases[i];
		for (int j = 0; j < 16; j++) s += layer2_weights[j][i] * layer1[j];
		layer2[i] = activate(s);
	}

	float layer3[16];
	for (int i = 0; i < 16; i++) {
		float s = layer3_biases[i];
		for (int j = 0; j < 16; j++) s += layer3_weights[j][i] * layer2[j];
		layer3[i] = activate(s);
	}

	float output[1];
	for (int i = 0; i < 1; i++) {
		float s = layer4_biases[i];
		for (int j = 0; j < 16; j++) s += layer4_weights[j][i] * layer3[j];
		output[i] = s;
	}

	return output[0];
}

int main(int argc, char* argv[]) {

	std::vector<triangle_3d> trigs =
		ScalarFieldTriangulator_octatree::octatree(fun, vec3(-1), vec3(1), ivec3(64), 2);

	writeSTL("D:\\.stl", &trigs[0], trigs.size());

	return 0;
}
