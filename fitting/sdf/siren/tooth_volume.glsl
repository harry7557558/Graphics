// Volume source: https://klacansky.com/open-scivis-datasets/ (1.43MB, modified)

// Ground truth:
// https://harry7557558.github.io/Graphics/raytracing/webgl_volume/index.html#volume=tooth&visual=skinbone&colormap=cThermometer&iso=0.500
// (much faster rendering, looks better/worse?)

// Trained in TensorFlow with Adam optimizer, mean squared error, equal weight for each voxel


// Siren neural net, defined in -1 < x,y,z < 1
float neuralVolume(in vec3 p) {
vec4 f00=sin(p.x*vec4(.135,-.92,.997,.893)+p.y*vec4(.345,.911,-.651,-1.521)+p.z*vec4(-.825,.656,-.139,.463)+vec4(-.428,.988,-.046,-.945));
vec4 f01=sin(p.x*vec4(.025,1.443,-1.637,.75)+p.y*vec4(-1.56,-1.163,-.861,.431)+p.z*vec4(-1.054,.9,.071,.182)+vec4(-.201,1.218,-.115,-.13));
vec4 f02=sin(p.x*vec4(1.734,-.576,-2.458,1.011)+p.y*vec4(.851,.527,.45,3.14)+p.z*vec4(-1.08,-.05,.364,.691)+vec4(.826,-.068,.883,.768));
vec4 f03=sin(p.x*vec4(.613,-1.078,-.187,-1.355)+p.y*vec4(.051,-2.254,1.874,-.106)+p.z*vec4(1.081,-1.454,2.599,1.164)+vec4(1.106,-.922,-.243,.976));
vec4 f10=sin(mat4(.237,1.184,-.33,-.309,.159,-.064,-1.225,.508,-.225,-.165,.229,-.875,.076,.21,.066,-.435)*f00
    +mat4(.314,1.199,.731,-.684,-.823,-.291,-.164,-.045,-.91,-.19,.737,-.423,-.123,.186,-.421,.414)*f01
    +mat4(-.115,-.24,-.15,-.717,.602,.069,-.02,1.011,.675,.108,.622,-.361,.271,-.1,-.129,.324)*f02
    +mat4(-.423,-.41,.885,-.368,.071,.488,.829,1.093,-.33,-.02,.687,.951,-.645,-.794,1.003,-1.404)*f03
    +vec4(-.314,.42,.682,.317));
vec4 f11=sin(mat4(.623,-.917,-.059,-.484,.052,-.276,.139,-.057,.517,.572,-.709,-.641,-.634,.198,-.309,.73)*f00
    +mat4(.848,-.171,-1.178,-.745,-.204,-.572,-.527,-.213,1.727,.241,.068,.143,-.447,.469,.724,.306)*f01
    +mat4(.76,-.992,.072,-.405,-.568,-.705,.697,.529,-.335,.303,.432,.145,.04,-.056,.288,.171)*f02
    +mat4(-.274,.7,-.054,-.363,.056,-.209,.752,.272,-.394,.361,.048,.035,-.176,.607,-.182,.402)*f03
    +vec4(.498,.69,.346,.271));
vec4 f12=sin(mat4(-.002,-.7,.11,-.593,1.26,-.066,-.275,-.545,-.502,.698,.187,-.258,-.593,-.014,.767,.504)*f00
    +mat4(-.788,-.514,-.677,.159,-.181,.25,1.02,.09,.432,-.637,-.284,-1.395,-.355,.422,.785,.94)*f01
    +mat4(.921,1.168,-.1,-.368,.65,-.37,-.272,-.237,.1,-.382,-1.027,-.366,.283,-.588,.271,.115)*f02
    +mat4(-.317,1.604,.237,.099,.279,-.171,-.186,-.055,-.186,.185,.531,.769,-1.034,-.079,.731,.179)*f03
    +vec4(.315,.32,.234,-.247));
vec4 f13=sin(mat4(.432,.461,-.251,-.908,.118,.238,-.62,.765,.697,.838,.623,-.889,.589,-1.182,.556,.012)*f00
    +mat4(.439,.094,.068,-.764,-.284,-.376,-.227,.695,-.842,.786,.325,.366,.96,-.432,-1.067,-.669)*f01
    +mat4(-1.989,-.098,-.284,-.049,.168,.028,-.32,.836,-.263,.361,.243,-.538,.396,.685,-.115,-.6)*f02
    +mat4(.142,.179,-.491,-.033,.666,-.194,.313,-.496,.953,-.925,.257,.116,-.007,-.351,-.388,1.296)*f03
    +vec4(-.286,.268,.283,.384));
vec4 f20=sin(mat4(1.067,.576,.5,-1.351,1.617,.496,-.806,-.089,-.99,.11,.77,-.887,.573,.052,-1.012,1.272)*f10
    +mat4(-.509,.281,.883,-.813,-.399,-1.383,-.242,1.315,-.499,.01,-.12,1.965,-.121,-.214,-2.116,-1.099)*f11
    +mat4(.901,.547,.566,-2.171,-.461,-.476,.454,.768,-1.299,-.416,.3,-.383,.142,-.181,-.009,.49)*f12
    +mat4(-.097,.154,.28,1.032,-.722,.505,-.243,-.543,-.404,-.341,-1.44,.607,-1.119,-.307,.489,-1.45)*f13
    +vec4(-.528,.114,-1.355,.252));
vec4 f21=sin(mat4(-.557,1.041,-.158,.194,-.752,.698,-.197,-.19,-.001,-.476,-.422,.448,-.181,.869,.953,-.999)*f10
    +mat4(.201,.42,-.784,-.225,.706,-.481,-.053,-.872,.126,-.226,-.153,-.126,-.046,.366,-.939,-.012)*f11
    +mat4(-.417,-.122,-1.034,.703,.524,-.386,.321,-.627,.381,.476,.171,-.402,.319,.038,.652,-.168)*f12
    +mat4(-.266,.401,1.156,-.259,-.405,1.071,.893,.748,-.134,.318,.808,.448,.217,-.316,-.825,.276)*f13
    +vec4(.122,.251,-.471,-.455));
vec4 f22=sin(mat4(-.305,1.162,.973,-.676,.767,-1.133,1.428,-.979,-1.136,1.027,-1.219,.286,.618,.265,1.458,-.905)*f10
    +mat4(.54,-.608,-.982,.567,.95,-.17,-.41,.435,-.303,.344,.365,.071,.476,-1.229,.844,-.176)*f11
    +mat4(.638,-.702,.295,.409,.565,-.454,-1.215,.15,.073,-.058,-1.183,.654,.733,-.836,-.686,-.318)*f12
    +mat4(.014,-.521,.263,-.234,-1.002,.819,.821,-.636,-1.256,-1.13,1.972,-.295,-.522,.21,-1.572,.714)*f13
    +vec4(.185,-.447,.147,.098));
vec4 f23=sin(mat4(-1.731,.056,.409,.383,.686,-.257,-.788,.816,-.286,.455,-.436,-.631,-.877,-.547,-.16,1.115)*f10
    +mat4(.72,.585,1.283,-.416,-.108,.838,.228,-.616,-.188,-.517,-1.421,.339,-.07,.594,.406,1.143)*f11
    +mat4(-.033,.243,1.652,.793,-.308,1.091,.522,-.488,-.253,.923,.113,-.276,-.714,-.292,-.316,-.049)*f12
    +mat4(-.091,-.93,-.056,.757,-.748,-.943,-.746,.662,.657,-.903,-.781,.594,.302,.593,-1.175,-.572)*f13
    +vec4(.231,-.572,.081,.417));
vec4 f30=sin(mat4(.315,.409,.083,.363,-1.403,.808,-.4,-.939,-.884,.19,-.307,-.108,.514,-.2,.185,-.058)*f20
    +mat4(-.128,.494,.029,-.702,.599,-.318,-.25,-.187,1.227,-.095,.094,-.128,.654,-.295,-.511,.316)*f21
    +mat4(.183,.325,.106,.282,-.856,.088,-.24,-.001,.817,-.571,.114,-.437,-.973,.449,-.11,.282)*f22
    +mat4(-.667,-.02,-.083,.162,.015,-.363,-.605,-.683,.239,-.088,.156,.159,.832,-.301,.224,.395)*f23
    +vec4(.043,-.11,-.304,-.07));
vec4 f31=sin(mat4(.473,.023,.568,.182,-.401,-.025,-.402,-1.307,-.338,-.286,.112,-.784,.107,.184,-.12,.415)*f20
    +mat4(.373,-.005,-.018,-.133,.135,.298,-.421,.479,-.151,.395,-.615,.995,-.139,.448,-.313,.08)*f21
    +mat4(.062,.051,.221,-.043,-.012,-.262,.467,-.65,.416,.164,-.003,.844,.042,-.205,-.186,-.835)*f22
    +mat4(-.154,-.283,.331,-.52,-.621,.373,-.804,-.261,.298,-.063,.369,.261,.243,.142,-.225,.765)*f23
    +vec4(-.224,-.446,.427,-.272));
vec4 f32=sin(mat4(1.812,-.311,-.889,-.265,-2.924,-.344,2.515,-1.312,-2.656,.39,1.888,-.736,1.839,-.226,-1.219,.338)*f20
    +mat4(.158,-.342,-.45,-.489,1.195,-.193,-.442,.789,1.664,-.668,-1.055,.804,.585,-.828,.254,-.43)*f21
    +mat4(1.203,-.327,-.743,-.423,-2.251,.4,1.369,-.552,2.255,-.175,-1.347,.844,-.784,.501,.619,-.266)*f22
    +mat4(-2.196,.307,1.213,-.512,-2.076,-.619,1.82,-.405,.963,-.051,-.593,.212,2.068,-.046,-1.471,.712)*f23
    +vec4(1.433,-.302,-1.556,-.575));
vec4 f33=sin(mat4(-1.071,.971,.6,-.127,.287,-.307,-.569,.175,.125,-.304,-.32,.016,-.145,.22,.04,-.074)*f20
    +mat4(.326,-.204,.429,-.039,.521,-.318,-.023,-.054,.328,-.067,-.014,.046,.457,-.352,.354,-.259)*f21
    +mat4(-.581,.496,.36,-.008,.203,-.336,-.024,.028,-.571,.695,-.111,-.28,.407,-.416,-.112,-.023)*f22
    +mat4(.312,-.463,.008,-.018,.911,-.82,-.581,-.062,-.469,.448,.222,-.078,-.069,.165,.629,.03)*f23
    +vec4(-.116,-.003,-.303,.134));
return dot(vec4(-.43,-.112,-.491,.23),f30)+dot(vec4(.378,-.747,-.252,.696),f31)+dot(vec4(-.065,-.318,.122,-.303),f32)+dot(vec4(-.521,-.659,-.376,.469),f33)-.324;
}

const vec3 BoxRadius = vec3(0.424, 0.398, 0.678);

float map(vec3 p) {
    p = p / BoxRadius;
    return neuralVolume(-p);
}
vec3 mapNormal(vec3 p) {
    mat3 k = mat3(p,p,p) - mat3(0.001);
    return -normalize(map(p) - vec3(map(k[0]),map(k[1]),map(k[2])));
}

// rendering quality
#define STEP 0.01
#define MAX_STEP 120.

// adjust this number to see what happens
#define uIso 0.5

// light, comment the line in mainImage if you like
vec3 light = normalize(vec3(0.5,0.5,1.0));

// colormap - https://www.shadertoy.com/view/NsSSRK
vec3 cThermometer(float t) {
  float r = .453+.122*t+.385*cos(4.177*t-2.507);
  float g = .284+.142*t+.554*cos(4.181*t-1.918);
  float b = .464+.05*t+.475*cos(3.217*t-.809);
  return vec3(r, g, b);
}

// constant step raymarching + volume sampling
vec3 vSkinBone(in vec3 ro, in vec3 rd, float t0, float t1) {
    float step_count = min(ceil((t1-t0)/STEP), MAX_STEP);
    float t = t0, dt = (t1-t0) / step_count;
    float iso1 = 1.0-uIso;
    float iso2 = 0.5-0.5*uIso;
    vec3 totcol = vec3(0.0);
    float totabs = 1.0;
    float v_old = 0.0, v;
    for (t = t0; t < t1; t += dt) {
        v = map(ro+rd*t);
        vec3 col = clamp(cThermometer(v), 0.0, 1.0);
        float absorb = abs(v-iso2)<0.2*(1.0-uIso) ? 20.0*uIso : 0.0;
        totabs *= exp(-absorb*dt);
        totcol += col*absorb*totabs*dt;
        if (v > iso1) break;
        v_old = v;
    }
    if (v < iso1) return totcol;
    for (int s = 0; s < 4; s += 1) {
        v_old = v;
        dt *= -0.5;
        for (int i = 0; i < 2; i++) {
            t += dt;
            v = map(ro+rd*t);
            if ((v-iso1)*(v_old-iso1)<0.0) break;
        }
    }
    vec3 n = mapNormal(ro+rd*t);
    float col = 0.2+0.05*n.y+0.6*max(dot(n, light),0.0);
    return totcol + col * totabs;
}

// ray intersection with a box
bool boxIntersection(vec3 ro, vec3 rd, out float tn, out float tf) {
    vec3 inv_rd = 1.0 / rd;
    vec3 n = inv_rd*(ro);
    vec3 k = abs(inv_rd)*BoxRadius;
    vec3 t1 = -n - k, t2 = -n + k;
    tn = max(max(t1.x, t1.y), t1.z);
    tf = min(min(t2.x, t2.y), t2.z);
    if (tn > tf) return false;
    return true;
}

// main
void mainImage(out vec4 fragColor, in vec2 fragCoord) {

    // set camera
    float rx = iMouse.z>0.?3.14*(iMouse.y/iResolution.y)-1.57:0.0;
    float rz = iMouse.z>0.?-iMouse.x/iResolution.x*4.0*3.14:0.5*iTime-2.0;
    rx += 1e-4, rz += 1e-4;  // prevent dividing by zero

    vec3 w = vec3(cos(rx)*vec2(cos(rz),sin(rz)), sin(rx));
    vec3 u = vec3(-sin(rz),cos(rz),0);
    vec3 v = cross(w,u);

    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.x,iResolution.y);
    vec3 ro = 4.0*w + 0.8*(uv.x*u+uv.y*v);
    vec3 rd = -w;

    // comment this line if you wish
    light = normalize(w+0.5*u+0.1*v);

    // calculate pixel color
    float t0, t1;
    if (!boxIntersection(ro, rd, t0, t1)) {
        fragColor = vec4(vec3(0.0), 1.0);
        return;
    }
    vec3 col = vSkinBone(ro, rd, t0, t1);;
    fragColor = vec4(col, 1.0);
}
