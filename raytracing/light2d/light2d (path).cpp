#pragma GCC optimize "Ofast"

#include <cmath>
#include <stdio.h>
#include <vector>
using namespace std;

#pragma warning(disable:4996)

#define PI 3.1415926535897932384626
#define max(x,y) ((x)>(y)?(x):(y))
#define min(x,y) ((x)<(y)?(x):(y))

typedef unsigned char byte;
typedef struct { byte r, g, b; } COLOR;

COLOR toCOLOR(double c) {
	if (c > 1.0) c = 1.0;
	else if (c < 0.0) c = 0.0;
	byte k = (byte)(255.0*c);
	COLOR r; r.r = r.b = r.g = k; return r;
}
COLOR toCOLOR(double r, double g, double b) {
	COLOR C;
	C.r = (byte)(255.0*(r > 1.0 ? 1.0 : r < 0.0 ? 0.0 : r));
	C.g = (byte)(255.0*(g > 1.0 ? 1.0 : g < 0.0 ? 0.0 : g));
	C.b = (byte)(255.0*(b > 1.0 ? 1.0 : b < 0.0 ? 0.0 : b));
	return C;
}

// https://github.com/miloyip/svpng.git
#include "svpng-master/svpng.inc"



//============================ Basic Definitions ============================//

class vec2 {
public:
	double x, y;
	vec2() {}
	vec2(const double &x, const double &y) :x(x), y(y) {}
	vec2 operator - () const {
		return vec2(-x, -y);
	}
	vec2 operator + (const vec2 &v) const {
		return vec2(x + v.x, y + v.y);
	}
	vec2 operator - (const vec2 &v) const {
		return vec2(x - v.x, y - v.y);
	}
	vec2 operator * (const double &k) const {
		return vec2(k * x, k * y);
	}
};

double dot(const vec2 &u, const vec2 &v) {
	return u.x * v.x + u.y * v.y;
}
double det(const vec2 &u, const vec2 &v) {
	return u.x * v.y - u.y * v.x;
}
double length(const vec2 &v) {
	return sqrt(v.x * v.x + v.y * v.y);
}
double length2(const vec2 &v) {
	return v.x * v.x + v.y * v.y;
}
vec2 normalize(const vec2 &v) {
	double m = 1.0 / sqrt(v.x * v.x + v.y * v.y);
	return vec2(m * v.x, m * v.y);
}

vec2 reflect(const vec2 &I, const vec2 &N) {
	return I - N * (2.0*dot(N, I));
}
vec2 refract(vec2 I, vec2 N, double n1, double n2, double &R) {
	double eta = n1 / n2;
	double ci = -dot(N, I);
	if (ci < 0) ci = -ci, N = -N;
	double ct = 1.0 - eta * eta * (1.0 - ci * ci);
	if (ct < 0) {
		R = -1; return vec2();
	}
	else ct = sqrt(ct);
	vec2 r = I * eta + N * (eta * ci - ct);
	double Rs = (n1 * ci - n2 * ct) / (n1 * ci + n2 * ct); Rs *= Rs;
	double Rp = (n1 * ct - n2 * ci) / (n1 * ct + n2 * ci); Rp *= Rp;
	R = 0.5 * (Rs + Rp);
	return r;
}


// 2x3 matrix, linear transform
class mat2x3 {
public:
	double a, b, c, d, x, y;
	mat2x3() :a(1), b(0), c(0), d(1), x(0), y(0) {}
	mat2x3(double a, double b, double c, double d) :a(a), b(b), c(c), d(d), x(0), y(0) {}
	mat2x3(double x, double y) :a(1), b(0), c(0), d(1), x(x), y(y) {}
	mat2x3(double a, double b, double c, double d, double x, double y) :a(a), b(b), c(c), d(d), x(x), y(y) {}
	mat2x3 operator * (const mat2x3 &m) const {
		return mat2x3(a*m.a + b * m.c, a*m.b + b * m.d, c*m.a + d * m.c, c*m.b + d * m.d,
			a*m.x + b * m.y + x, c*m.x + d * m.y + y);
	}
	vec2 applyTo(const vec2 &v) const {
		return vec2(a*v.x + b * v.y + x, c*v.x + d * v.y + y);
	}
	vec2 operator * (const vec2 &v) const {
		return vec2(a*v.x + b * v.y, c*v.x + d * v.y);
	}
};



//===================== Cubic Spline Class and Operations =====================//

class spline3 {
public:
	vec2 A, B, C, D;	// A t^3 + 3 B t^2 + 3 C t + D
	vec2 Min, Max;
	void calcRange() {
		Min = D, Max = A + (B + C) * 3.0 + D;
		if (Min.x > Max.x) swap(Min.x, Max.x); if (Min.y > Max.y) swap(Min.y, Max.y);
		auto getMaxMin = [](double a, double b, double c, double d, double &Min, double &Max) {
			if (abs(a) < 1e-8) {
				if (abs(b) < 1e-8) return;
				double t = -c / (2.0 * b), x;
				if (t > 0 && t < 1) {
					x = ((a*t + 3.0*b)*t + 3.0*c)*t + d;
					if (x < Min) Min = x; if (x > Max) Max = x;
				}
				return;
			}
			double delta = b * b - a * c;
			if (delta >= 0) {
				delta = sqrt(delta);
				double t = (-b - delta) / a, x;
				if (t > 0 && t < 1) {
					x = ((a*t + 3.0*b)*t + 3.0*c)*t + d;
					if (x < Min) Min = x; if (x > Max) Max = x;
				}
				t = (-b + delta) / a;
				if (t > 0 && t < 1) {
					x = ((a*t + 3.0*b)*t + 3.0*c)*t + d;
					if (x < Min) Min = x; if (x > Max) Max = x;
				}
			}
		};
		getMaxMin(A.x, B.x, C.x, D.x, Min.x, Max.x);
		getMaxMin(A.y, B.y, C.y, D.y, Min.y, Max.y);
	}
	vec2 eval(const double &t) const {
		return ((A*t + B * 3.0)*t + C * 3.0)*t + D;
	}

	spline3() {}
	spline3(vec2 A, vec2 B, vec2 C, vec2 D) :A(A), B(B*(1. / 3)), C(C*(1. / 3)), D(D) {}
	void applyMatrix(const mat2x3 &M) {
		A = M * A, B = M * B, C = M * C, D = M.applyTo(D);
	}
	spline3 invert() const {
		return spline3(-A, (A + B)*3.0, (A + B * 2.0 + C)*-3.0, A + D + (B + C)*3.0);
	}
};

spline3 fromSegment(vec2 A, vec2 B) {
	return spline3(vec2(0, 0), vec2(0, 0), B - A, A);
}
spline3 fromBezier2(vec2 A, vec2 B, vec2 C) {
	return spline3(vec2(0, 0), A - B * 2.0 + C, (B - A) * 2.0, A);
}
spline3 fromBezier3(vec2 A, vec2 B, vec2 C, vec2 D) {
	return spline3(D - C * 3.0 + B * 3.0 - A, (C - B * 2.0 + A)*3.0, (B - A)*3.0, A);
}
spline3 fromArc(double theta, mat2x3 T) {
	// unit arc from angle 0 to theta, 0 < theta < pi, least square fitting
	double s1 = sin(theta), s2 = s1 * s1, s3 = s2 * s1, s4 = s3 * s1,
		c1 = cos(theta), c2 = c1 * c1, c3 = c2 * c1, c4 = c3 * c1;
	double a = 756 * s4 + (1512 * c2 - 1890 * c1 + 810)*s2 + 756 * c4 - 1890 * c3 + 2430 * c2 - 1890 * c1 + 756,
		b = (3996 * s3 + (3996 * c2 - 6750 * c1 + 3996)*s1) / a,
		c = (2520 * s4 + (5040 * c2 - 507 * c1 + 2736)*s2 + 2520 * c4 - 507 * c3 - 6600 * c2 + 7215 * c1 - 2628) / a,
		d = (3439 * s3 + (3439 * c2 + 4276 * c1 - 7715)*s1) / a;
	double p = (c - b * b / 3) / 3, q = -0.5 * ((b*b / 13.5 - c / 3) * b + d);
	a = q * q + p * p * p;
	double r = a > 0 ? cbrt(q + sqrt(a)) + cbrt(q - sqrt(a)) - b / 3
		: 2 * pow(q*q - a, 1.0 / 6) * cos(atan2(sqrt(-a), q) / 3) - b / 3;
	spline3 R = fromBezier3(vec2(1, 0), vec2(1, r), vec2(c1 + r * s1, s1 - r * c1), vec2(c1, s1));
	R.applyMatrix(T);
	return R;
}
void fromArc(vec2 c, vec2 r, double t0, double t1, double rot, vector<spline3> &v) {
	double dt = t1 - t0;
	int n = abs(dt) < 0.5 ? 1 : int((abs(dt) - 0.5) / (PI / 2)) + 1;
	dt /= n;
	mat2x3 B(cos(t0), -sin(t0), sin(t0), cos(t0));
	if (dt < 0) B = B * mat2x3(1, 0, 0, -1);
	spline3 s = fromArc(abs(dt), B), d;
	mat2x3 R = mat2x3(cos(dt), -sin(dt), sin(dt), cos(dt));
	mat2x3 T = mat2x3(c.x, c.y) * mat2x3(cos(rot), -sin(rot), sin(rot), cos(rot)) * mat2x3(r.x, 0, 0, r.y);
	for (int i = 0; i < n; i++) {
		d = s; d.applyMatrix(T);
		v.push_back(d);
		s.applyMatrix(R);
	}
}

void getRange(vector<spline3> &v, vec2 &Min, vec2 &Max) {
	Min = vec2(INFINITY, INFINITY), Max = -Min;
	for (unsigned i = 0; i < v.size(); i++) {
		v[i].calcRange();
		if (v[i].Min.x < Min.x) Min.x = v[i].Min.x;
		if (v[i].Min.y < Min.y) Min.y = v[i].Min.y;
		if (v[i].Max.x > Max.x) Max.x = v[i].Max.x;
		if (v[i].Max.y > Max.y) Max.y = v[i].Max.y;
	}
}

// visualization for debugging
void rasterize(const spline3 &l, COLOR *Canvas, int W, int H, vec2 Dir, double Scale, int N) {
	const COLOR black = toCOLOR(0);
	mat2x3 M = mat2x3(Scale, 0, 0, Scale) * mat2x3(Dir.x, Dir.y);
	vec2 A = M * l.A, B = M * (l.B*3.0), C = M * (l.C*3.0), D = M.applyTo(l.D);
#define C(x,y) Canvas[(y)*W+(x)]

	auto drawLine = [&](vec2 p, vec2 q) {
		vec2 d = q - p;
		double slope = d.y / d.x;
		if (abs(slope) <= 1.0) {
			if (p.x > q.x) swap(p, q);
			int x0 = max(0, int(p.x)), x1 = min(W - 1, int(q.x)), y;
			double yf = slope * x0 + (p.y - slope * p.x);
			for (int x = x0; x <= x1; x++) {
				y = (int)yf;
				if (y >= 0 && y < H) C(x, y) = black;
				yf += slope;
			}
		}
		else {
			slope = 1.0 / slope;
			if (p.y > q.y) swap(p, q);
			int y0 = max(0, int(p.y)), y1 = min(H - 1, int(q.y)), x;
			double xf = slope * y0 + (p.x - slope * p.y);
			for (int y = y0; y <= y1; y++) {
				x = (int)xf;
				if (x >= 0 && x < W) C(x, y) = black;
				xf += slope;
			}
		}
	};

	for (int i = 0; i < N; i++) {
		double t = i / double(N), s = (i + 1.0) / N;
		vec2 p = ((A*t + B)*t + C)*t + D, q = ((A*s + B)*s + C)*s + D;
		drawLine(p, q);
	}

#undef C
}




#define _INT_DIR vec2(1.2353e-8, -2.3886e-8)	// avoid degenerated cases in intersection calculations

bool boxIntersect(const vec2 &Min, const vec2 &Max, vec2 p, vec2 d) {
	double tmin, tmax, tymin, tymax;
	tmin = ((d.x < 0 ? Max : Min).x - p.x) / d.x;
	tmax = ((d.x < 0 ? Min : Max).x - p.x) / d.x;
	tymin = ((d.y < 0 ? Max : Min).y - p.y) / d.y;
	tymax = ((d.y < 0 ? Min : Max).y - p.y) / d.y;
	if ((tmin > tymax) || (tymin > tmax)) return 0;
	if (tymin > tmin) tmin = tymin;
	if (tymax < tmax) tmax = tymax;
	return tmax > 0;
}

// construct a ray toward right, return the number of intersections
int intersections(const spline3 &S, const vec2 &P) {
	if (P.x > S.Max.x) return 0;
	if (P.y > S.Max.y || P.y < S.Min.y) return 0;
#define testRoot(t) \
	if (t < 0 || t >= 1) ct--; \
	else if ((((S.A.x*t + S.B.x * 3.0)*t + S.C.x * 3.0)*t + S.D.x) - P.x < 0) ct--;
	double a = S.A.y, b = S.B.y, c = S.C.y, d = S.D.y - P.y;
	if (abs(a) < 1e-8) {
		if (abs(b) < 1e-8) {
			int ct = 1;
			double t = -d / (3.0*c);
			testRoot(t);
			return ct;
		}
		int ct = 2;
		b *= 3.0, c *= 3.0, a = c * c - 4 * b*d;
		if (a < 0) return 0;
		b = 0.5 / b, a = sqrt(a)*b, c = -c * b;
		double t = c + a; testRoot(t);
		t = c - a; testRoot(t);
		return ct;
	}
	a = 1. / a, b *= a, c *= a, d *= a;
	double p = c - b * b, q = (1.5*c - b * b) * b - 0.5*d;
	a = q * q + p * p * p;
	double r, u, v;
	if (a > 0) {
		int ct = 1;
		a = sqrt(a);
		u = q + a; u = u > 0.0 ? pow(u, 1. / 3) : -pow(-u, 1. / 3);
		v = q - a; v = v > 0.0 ? pow(v, 1. / 3) : -pow(-v, 1. / 3);
		r = u + v - b;
		testRoot(r);
		return ct;
	}
	else {
		int ct = 3;
		c = pow(q*q - a, 1.0 / 6);
		u = 1. / 3 * atan(sqrt(-a) / q); if (q < 0) u += PI / 3;
		d = c * sin(u), c *= cos(u);
		r = 2 * c - b;
		c = -c, d *= sqrt(3);
		u = c - d - b, v = u + 2 * d;
		testRoot(r); testRoot(u); testRoot(v);
		return ct;
	}
#undef testRoot
}
bool inside(const vector<spline3> &v, vec2 p) {
	int ct = 0;
	for (unsigned d = 0, l = v.size(); d < l; d++) ct += intersections(v[d], p);
	return ct & 1;
}

double calcArea(const vector<spline3> &V) {	 // based on divergence theorem, only work with prerequisites
	double A = 0;
	for (unsigned i = 0; i < V.size(); i++) {
		double Int = (30.0 * V[i].C.x + 30.0 * V[i].B.x + 10.0 * V[i].A.x)*V[i].D.y + (-30.0 * V[i].D.x + 30.0 * V[i].B.x + 15.0 * V[i].A.x)*V[i].C.y + (-30.0 * V[i].D.x - 30.0 * V[i].C.x + 6.0 * V[i].A.x)*V[i].B.y - (10.0 * V[i].D.x + 15.0 * V[i].C.x + 6.0 * V[i].B.x)*V[i].A.y;
		vec2 P = V[i].eval(0.5), T = V[i].A*0.25 + V[i].B + V[i].C;
		if (inside(V, P + vec2(-T.y, T.x) * 1e-6)) A -= Int;
		else A += Int;
	}
	return 0.05*A;
}

bool intersect(const spline3 &Sp, vec2 P, vec2 D, double &mt, double &tp) {
	vec2 N(-D.y, D.x);
	double a = dot(N, Sp.A), b = dot(N, Sp.B), c = dot(N, Sp.C), d = dot(N, Sp.D - P);
	auto testRoot = [&](double _t) ->bool {
		if (_t < 0.0 || _t > 1.0) return false;
		_t = dot(D, ((Sp.A*_t + Sp.B * 3.0)*_t + Sp.C * 3.0)*_t + Sp.D - P);
		if (_t > 1e-6 && _t < mt) {
			mt = _t; return true;
		}
		return false;
	};
	if (abs(a) < 1e-8) {
		if (abs(b) < 1e-8) {
			tp = -d / (3.0*c);
			if (tp < 0.0 || tp > 1.0) return false;
			double t = dot(D, (Sp.C * 3.0)*tp + Sp.D - P);
			if (t > 1e-6 && t < mt) { mt = t; return true; }
			return false;
		}
		b *= 3.0, c *= 3.0, a = c * c - 4 * b*d;
		if (a < 0) return false;
		b = 0.5 / b, a = sqrt(a)*b, c = -c * b;
		bool u = testRoot(c + a), v = testRoot(c - a);
		tp = v ? c - a : u ? c + a : tp;
		return u || v;
	}
	if (!boxIntersect(Sp.Min, Sp.Max, P, D)) return false;
	a = 1. / a, b *= a, c *= a, d *= a;
	double p = c - b * b, q = (1.5*c - b * b) * b - 0.5*d;
	a = q * q + p * p * p;
	double r, u, v;
	if (a > 0) {
		a = sqrt(a);
		u = q + a; u = u > 0.0 ? pow(u, 1. / 3) : -pow(-u, 1. / 3);
		v = q - a; v = v > 0.0 ? pow(v, 1. / 3) : -pow(-v, 1. / 3);
		tp = u + v - b;
		return testRoot(tp);
	}
	else {
		int ct = 3;
		c = pow(q*q - a, 1.0 / 6);
		u = 1. / 3 * atan(sqrt(-a) / q); if (q < 0) u += PI / 3;
		d = c * sin(u), c *= cos(u);
		r = 2 * c - b;
		c = -c, d *= sqrt(3);
		u = c - d - b, v = u + 2 * d;
		bool p1 = testRoot(r), p2 = testRoot(u), p3 = testRoot(v);
		tp = p3 ? v : p2 ? u : p1 ? r : tp;
		return p1 || p2 || p3;
	}
#undef testRoot
}




//============== Conversion between SVG Path Data and Spline Lists ==============//

#include <string>
bool fromPath(const string &S, vector<spline3> &V) {
#define isFloat(c) ((c >= '0' && c <= '9') || c == '-' || c == '.')
#define readFloat(r) { \
		while (d < S.size() && (S[d] == ' ' || S[d] == ',')) d++; \
		if (d >= S.size() || !isFloat(S[d])) return false; \
		unsigned sz; \
		(r) = stod(&S[d], &sz); \
		d += sz; \
	}
#define readPoint(v) { readFloat((v).x); readFloat((v).y); }

	char cmd = '\0'; vec2 P(0, 0), P0(0, 0), P1(NAN, NAN);
	for (unsigned d = 0; d < S.size();) {
		while (d < S.size() && (S[d] == ' ' || S[d] == ',')) d++;

		if (string("MZLHVCSQTA").find(S[d] >= 'a' ? S[d] - 32 : S[d]) != -1) cmd = S[d], d++;
		else if (!isFloat(S[d])) return false;

		switch (cmd) {
		case 'M':;
		case 'm': {
			vec2 tmp; readPoint(tmp);
			if (cmd == 'm') P = P0 + tmp;
			else P = tmp;
			P0 = P, P1 = vec2(NAN, NAN);
			break;
		}
		case 'Z':;
		case 'z': {
			if (P.x != P0.x || P.y != P0.y) V.push_back(fromSegment(P, P0));
			P1 = vec2(NAN, NAN);
			break;
		}
		case 'L':;
		case 'l': {
			vec2 Q; readPoint(Q);
			if (cmd == 'l') Q = P + Q;
			if (P.x != Q.x || P.y != Q.y) V.push_back(fromSegment(P, Q));
			P1 = P, P = Q;
			break;
		}
		case 'H':;
		case 'h': {
			double c; readFloat(c);
			vec2 tmp = P;
			if (cmd == 'H') tmp.x = c;
			else tmp.x += c;
			V.push_back(fromSegment(P, tmp));
			P1 = P, P = tmp;
			break;
		}
		case 'V':;
		case 'v': {
			double c; readFloat(c);
			vec2 tmp = P;
			if (cmd == 'V') tmp.y = c;
			else tmp.y += c;
			V.push_back(fromSegment(P, tmp));
			P1 = P, P = tmp;
			break;
		}
		case 'C':;
		case 'c': {
			vec2 B, C, D;
			readPoint(B); readPoint(C); readPoint(D);
			if (cmd == 'c') B = B + P, C = C + P, D = D + P;
			V.push_back(fromBezier3(P, B, C, D));
			P1 = C, P = D;
			break;
		}
		case 'S':;
		case 's': {
			if (isnan(P1.x)) return 0;
			vec2 B = P * 2.0 - P1;
			vec2 C, D;
			readPoint(C); readPoint(D);
			if (cmd == 's') C = P + C, D = P + D;
			V.push_back(fromBezier3(P, B, C, D));
			P1 = C, P = D;
			break;
		}
		case 'Q':;
		case 'q': {
			vec2 B, C;
			readPoint(B); readPoint(C);
			if (cmd == 'q') B = B + P, C = C + P;
			V.push_back(fromBezier2(P, B, C));
			P1 = B, P = C;
			break;
		}
		case 'T':;
		case 't': {
			if (isnan(P1.x)) return 0;
			vec2 B = P * 2.0 - P1;
			vec2 C; readPoint(C);
			if (cmd == 't') C = P + C;
			V.push_back(fromBezier2(P, B, C));
			P1 = B, P = C;
			break;
		}
		case 'A':;
		case 'a': {		// probably have bugs
			vec2 r; readPoint(r);
			double theta; readFloat(theta); theta *= PI / 180;
			bool laf, sf; readFloat(laf); readFloat(sf);
			vec2 Q; readPoint(Q);
			if (cmd == 'a') Q = P + Q;

			mat2x3 T = mat2x3(1. / r.x, 0, 0, 1. / r.y) * mat2x3(cos(theta), sin(theta), -sin(theta), cos(theta));
			vec2 p = T * P, q = T * Q, d = q - p;
			if (length(d) >= 2.0) {
				double s = (2.0 - 1e-12) / length(d);
				r = r * (1. / s), p = p * s, q = q * s, d = d * s;
			}
			double a = acos(0.5*length(d)), b;
			if (isnan(a)) {
				P = Q, P1 = P;
				break;
			}
			vec2 C = p + mat2x3(cos(a), -sin(a), sin(a), cos(a)) * normalize(d);
			T = mat2x3(r.x, 0, 0, r.y);
			C = T * C, p = T * p, q = T * q;
			if (!sf ^ laf) C = p + q - C;

			T = mat2x3(cos(theta), -sin(theta), sin(theta), cos(theta));
			a = atan2((p.y - C.y) / r.y, (p.x - C.x) / r.x), b = atan2((q.y - C.y) / r.y, (q.x - C.x) / r.x);
			if (sf && b < a) b += 2 * PI;
			if (!sf && a < b) a += 2 * PI;
			fromArc(T*C, r, a, b, theta, V);

			P = Q;
			break;
		}
		default: {
			return false;
		}
		}
	}
	return true;
#undef isFloat
#undef readFloat
#undef readPoint
}

#include <sstream>
#include <iomanip>
string toPath(const vector<spline3> &v) {
	auto toBezier = [](const spline3 &p, vec2 &A, vec2 &B, vec2 &C, vec2 &D) ->int {
		int N = length2(p.A) ? 3 : length2(p.B) ? 2 : length2(p.C) ? 1 : 0;
		if (N == 0);
		else if (N == 1) A = p.D, B = A + p.C*3.0;
		else if (N == 2) A = p.D, B = p.C*1.5 + A, C = p.B*3.0 - A + B * 2.0;
		else if (N == 3) A = p.D, B = p.C + A, C = p.B + B * 2.0 - A, D = p.A + C * 3.0 - B * 3.0 + A;
		return N;
	};
	string s;
	if (v.empty()) return s;

	vec2 A, B, C, D, P = vec2(NAN, NAN);
	auto toString = [](vec2 p) ->string {
		stringstream ss;
		if (abs(p.x) < 1e-6) p.x = 0;
		if (abs(p.y) < 1e-6) p.y = 0;
		ss << setprecision(6) << p.x << "," << p.y;
		return string(ss.str());
	};
	for (unsigned i = 0; i < v.size(); i++) {
		int n = toBezier(v[i], A, B, C, D);
		if (!(length2(P - A) < 1e-6)) s += "M" + toString(A) + " ", P = A;
		s += n == 3 ? 'C' : n == 2 ? 'Q' : n == 1 ? 'L' : ' ';
		if (n >= 1) s += toString(B) + " ", P = B;
		if (n >= 2) s += toString(C) + " ", P = C;
		if (n >= 3) s += toString(D) + " ", P = D;
	}
	while (s[s.size() - 1] == ' ') s.erase(s.size() - 1, 1);
	return s;
}




//============================== Debug Test Cases ==============================//

const string S[20] = {
	"M170,20 L320,170 L320,420 L20,420 L20,170 L170,20",
	"M203.609,57.3965 C22.7434,-87.296 -97.8337,226.204 203.609,346.781 C505.052,226.204 384.475,-87.296 203.609,57.3965",
	"M560.587,165.716 C554.29,134.234 522.808,81.1645 391.485,81.1645 C390.585,82.064 361.802,35.2911 361.802,35.2911 C357.304,25.3969 296.14,20 246.669,20 C143.229,20 55.9791,109.948 34.3917,165.716 L20,165.716 L20,188.202 L59.5771,188.202 C59.5771,214.287 81.1645,235.875 107.249,235.875 C133.334,235.875 154.022,214.287 154.022,188.202 L414.871,188.202 C414.871,214.287 436.009,235.875 462.543,235.875 C488.628,235.875 509.316,214.287 509.316,188.202 L575.878,188.202 L575.878,165.716 L560.587,165.716",
	"M86.0376,21.6152 C198.177,7.90925 243.731,83.7155 215.621,162.412 C209.391,179.856 319.038,257.108 345.204,283.274 C371.37,309.44 367.632,336.851 350.188,354.295 C332.744,371.739 307.824,376.723 282.905,350.557 C258.334,324.753 178.241,219.728 165.781,220.974 C66.1017,239.664 21.246,215.99 20,87.6528 L91.0216,157.428 C124.663,149.952 150.829,127.525 157.059,93.8828 C155.813,92.6368 84.7916,21.6152 86.0376,21.6152",
	"M415.959,283.83 C448.492,281.595 474.224,254.627 474.224,221.547 C474.224,187.064 446.281,159.121 411.798,159.121 C409.705,159.121 407.636,159.121 405.603,159.418 C399.312,111.558 357.873,74.6971 307.754,74.6971 C306.672,74.6971 305.602,74.7209 304.532,74.7447 C282.784,41.7718 245.53,20 203.116,20 C136.659,20 82.6995,73.4367 81.8434,139.692 C46.8491,144.852 20,175.007 20,211.44 C20,247.445 46.1595,278.515 80.6424,284.187 C80.6424,284.187 414.58,283.925 415.959,283.83 M415.959,283.973 C414.58,283.973 415.959,283.973 415.959,283.973",
	"M283.659,80.2481 C295.706,103.634 306.346,148.288 306.346,156.789 C306.346,165.301 296.57,173.319 304.927,185.849 C313.428,198.606 330.441,216.328 330.441,229.085 C330.441,241.842 299.253,232.631 309.183,254.599 C315.556,269.483 303.509,268.774 303.509,268.774 C317.684,279.413 294.298,285.787 299.962,300.671 C305.636,315.556 301.381,332.569 269.483,332.569 C209.955,332.569 213.491,332.569 213.491,375.095 C213.491,417.621 61.1077,416.203 61.118,375.804 C61.1077,335.406 68.2006,304.218 68.2006,304.218 C68.2006,243.26 20,277.995 20,136.95 C20,58.2706 90.1679,20 141.195,20 C192.233,20 275.158,55.4334 279.413,24.2557 C294.298,24.2557 302.09,56.1427 283.659,80.2481",
	"M453.216,83.6394 C425.728,83.6394 393.183,77.1303 383.782,66.2891 C374.381,55.4371 361.363,20 328.818,20 C296.273,20 269.511,35.1842 269.511,77.856 C269.511,120.528 285.431,171.875 296.998,195.745 C232.633,132.105 144.398,127.762 20,207.323 L82.199,296.998 L382.342,296.998 C382.342,215.272 356.305,179.109 328.818,127.037 C361.363,127.037 379.45,105.344 379.45,105.344 L412.71,105.344 C442.364,105.116 453.216,83.6394 453.216,83.6394",
	"M118.96,228.848 C118.96,228.848 35.4623,257.249 28.0781,259.521 C20.6939,261.793 19.5579,244.184 20.1259,228.848 C20.6939,213.511 11.0377,72.6438 146.225,31.1787 C136.001,21.5225 176.33,14.7063 172.354,25.4986 C293.909,11.8662 334.806,92.5243 363.207,174.318 C363.775,174.886 441.025,215.784 441.593,216.352 C467.153,232.824 469.426,275.993 429.096,257.249 C388.767,238.504 372.295,224.304 372.295,224.304 C314.926,234.528 260.396,331.09 176.898,275.425 C125.379,241.083 118.96,228.848 118.96,228.848",
	"M112.006,440.73 C179.542,440.73 240.612,394.85 240.69,317.699 C240.612,265.288 209.612,216.814 203.805,204.953 C197.997,191.105 169.307,149.562 169.307,112.974 C169.307,77.3664 197.029,50.6642 216.401,50.6642 C235.772,50.6642 236.74,66.4868 241.593,78.3601 C248.446,95.1635 263.133,102.094 274.877,102.094 C289.564,102.094 305.219,88.246 305.219,70.436 C305.219,31.8734 265.082,20 235.772,20 C167.346,20 113.541,83.3031 113.541,140.669 C112.573,186.162 135.068,220.776 141.908,237.592 C154.091,269.237 183.465,309.787 183.465,352.312 C183.465,386.938 157.034,412.647 128.654,412.647 C104.172,412.647 99.2805,401.767 93.4083,384.951 C87.5362,368.147 74.811,353.306 53.2841,353.306 C32.7251,353.306 20,372.097 20,385.945 C20,418.454 55.2329,440.73 112.006,440.73",
	"M351.33,124.86 C368.253,85.5535 369.891,52.7983 350.238,33.1453 C328.401,11.3085 275.447,17.8595 220.309,44.0636 C218.125,44.0636 215.942,44.0636 213.212,44.0636 C173.906,44.0636 136.238,58.2575 107.304,83.9157 C83.2834,105.207 66.36,134.14 58.7171,165.804 C64.1763,159.252 94.7477,122.676 129.687,103.569 C130.232,103.023 138.967,98.6555 140.059,98.6555 C139.513,99.2014 122.044,115.033 119.314,118.309 C42.3395,194.737 -2.97172,313.747 31.9671,349.232 C54.8957,372.161 96.3855,366.156 144.972,340.498 C165.717,350.324 189.192,355.237 213.758,355.237 C246.513,355.237 277.085,345.957 303.289,329.033 C330.039,311.018 350.784,284.814 362.248,252.605 L276.539,252.605 C265.62,273.35 239.962,288.089 213.758,288.089 C176.636,288.089 145.518,258.064 145.518,222.033 L145.518,220.395 L145.518,218.758 L147.156,218.758 L367.707,218.758 C367.707,217.666 367.707,216.574 368.253,215.482 C368.799,210.023 369.345,204.018 369.345,199.105 C369.345,171.809 363.34,146.696 351.33,124.86 M55.9875,342.681 C39.064,325.758 43.4314,291.365 65.2681,250.421 C75.0947,278.263 91.4722,301.737 112.217,319.753 C118.768,325.212 126.411,330.671 134.054,335.038 C98.5692,353.054 70.7273,357.421 55.9875,342.681 M138.421,337.222 C138.967,337.222 138.967,337.768 139.513,337.768 C138.967,337.768 138.421,337.768 138.421,337.222 M280.36,176.722 L147.156,176.722 L145.518,176.722 L145.518,175.084 C147.702,141.237 179.911,112.303 216.488,112.303 C251.426,112.303 280.36,140.145 281.998,175.084 L281.998,176.722 L280.36,176.722 M321.304,85.5535 C306.018,71.3596 288.549,60.4412 268.896,53.3443 C303.835,37.5126 332.768,35.3289 348.054,50.6147 C360.61,63.1708 358.972,86.6453 346.416,116.125 M348.054,50.6147  M346.416,116.125 C339.319,105.207 331.131,94.8341 321.304,85.5535",
	"M205.937,89.0812 L219.748,79.8737 C219.748,79.8737 211.334,70.9837 211.81,44.4723 C212.287,17.961 230.384,11.611 241.973,32.2485 C253.562,52.8861 248.323,70.9837 248.323,70.9837 L257.372,70.9837 C257.372,70.9837 255.784,49.7111 268.008,40.8211 C280.232,31.7723 287.693,38.1223 284.518,53.0448 C281.343,67.8086 273.406,73.6824 273.406,73.6824 L283.089,77.0162 C283.089,77.0162 286.582,70.5074 304.68,57.1724 C322.777,43.9961 354.21,38.916 333.255,67.8086 C320.078,85.9062 312.617,89.875 301.505,97.0188 L308.966,102.258 C308.966,102.258 324.365,90.0337 361.988,86.3825 C399.612,82.7312 411.836,97.9713 374.212,117.656 C336.588,137.341 322.777,132.42 322.777,132.42 L322.301,141.945 C322.301,141.945 385.325,127.181 407.709,144.644 C430.092,162.106 428.981,169.092 405.01,175.442 C381.197,181.792 323.571,164.964 323.571,164.964 L322.142,177.029 C322.142,177.029 363.735,180.204 382.15,201.477 C400.724,222.749 384.214,249.737 357.702,233.862 C331.191,217.987 313.728,204.175 313.728,204.175 L308.966,211.637 C308.966,211.637 337.541,228.147 341.351,248.784 C345.002,269.422 342.938,299.108 308.966,272.597 C274.993,246.086 278.803,217.51 278.803,217.51 L269.278,221.162 C269.278,221.162 284.677,242.434 282.454,268.311 C280.391,294.346 274.993,319.27 255.943,307.046 C236.893,294.822 236.099,232.592 236.099,232.592 L229.432,231.957 C229.432,231.957 214.985,279.741 204.032,299.584 C192.919,319.905 180.695,324.985 181.807,302.283 C182.918,279.423 214.192,221.162 214.192,221.162 L206.73,215.923 C206.73,215.923 197.364,248.308 178.632,270.533 C160.217,292.282 125.133,326.255 138.309,285.297 C151.485,244.498 201.333,207.35 201.333,207.35 L194.507,197.349 C194.507,197.349 165.932,228.623 126.72,250.372 C87.5088,272.121 41.9474,272.121 75.285,232.909 C108.623,193.698 173.393,179.887 173.393,179.887 L171.329,167.663 C171.329,167.663 89.0963,217.034 50.5199,216.399 C11.7848,215.923 5.75224,190.84 56.8699,174.489 C107.353,158.455 156.565,154.486 156.565,154.486 L151.326,151.946 C151.326,151.946 68.6175,165.916 46.8686,148.454 C70.205,115.116 158.153,128.769 158.153,128.769 L162.598,122.578 C162.598,122.578 117.036,122.578 86.08,100.194 C56.2349,78.6037 103.86,73.2062 126.403,78.4449 C145.611,83.0487 176.409,100.353 176.409,100.353 L179.902,96.5425 C179.902,96.5425 132.753,73.2062 132.753,60.5061 C132.753,47.8061 156.724,43.2023 181.013,63.6811 C203.555,83.0487 205.937,89.0812 205.937,89.0812 M199.11,112.894 C199.11,112.894 174.187,130.356 181.013,150.994 C187.68,171.632 204.032,197.19 235.464,201.318 C267.373,205.604 312.141,195.444 311.665,160.519 C311.188,126.864 300.552,130.039 294.519,157.82 C292.932,130.833 283.089,127.023 274.834,165.281 C276.422,117.498 268.643,121.784 262.452,159.408 C264.039,119.879 254.673,107.496 245.942,146.231 C244.831,109.084 230.384,114.481 226.257,157.82 C230.861,109.243 223.082,114.164 212.287,143.056 C218.478,114.481 220.065,108.131 199.269,131.944 C215.303,104.48 199.11,112.894 199.11,112.894",
	"M360.759,231.504 C360.123,197.848 349.582,201.912 333.706,197.848 C317.83,193.783 317.195,204.579 310.464,207.119 C303.733,209.659 283.793,209.659 241.245,213.85 C198.698,218.042 152.976,234.171 152.976,234.171 C135.195,225.916 133.925,247.888 148.531,297.675 C163.136,347.461 187.268,364.353 191.078,366.639 C194.888,368.925 198.444,359.019 205.43,358.638 C212.415,358.257 255.597,352.923 269.949,349.366 C284.301,345.81 273.124,348.985 279.474,363.083 C285.825,377.181 293.826,372.99 305.257,361.813 C316.687,350.636 330.658,369.433 345.264,330.315 C359.869,291.197 361.394,265.161 360.759,231.504 M231.593,271.511 C231.593,271.511 211.272,275.068 201.111,276.338 C190.951,277.608 197.301,295.77 204.032,303.644 C210.764,311.518 231.339,305.295 231.339,305.295 L231.72,326.886 C231.72,326.886 226.005,325.235 199.968,331.712 C190.443,324.981 177.996,292.34 172.027,265.034 C180.028,255.763 232.355,245.602 232.355,245.602 L231.593,271.511 M298.525,319.774 C281.379,317.234 259.407,322.06 259.407,322.06 L259.026,298.818 C259.026,298.818 285.063,293.738 287.603,281.291 C290.143,268.844 284.428,259.065 273.632,262.24 C262.836,265.415 259.28,265.415 259.28,265.415 L259.915,240.268 C283.793,240.268 299.033,228.837 315.163,231.631 C318.846,263.256 303.606,315.075 298.525,319.774 M309.702,113.134 C297.001,103.863 300.43,96.6234 274.14,98.5285 C247.85,100.434 191.84,120.12 191.84,120.12 C191.84,120.12 180.663,111.229 170.249,115.039 C159.834,118.85 160.342,140.822 175.964,173.208 C191.586,205.595 201.111,206.611 207.716,209.786 C214.32,212.961 208.986,203.436 220.416,202.42 C231.847,201.404 259.153,188.703 275.41,188.068 C291.667,187.433 289.381,185.782 307.543,154.03 C325.705,122.279 322.403,122.279 309.702,113.134 M249.882,169.017 C249.882,169.017 224.099,174.097 216.479,178.289 C206.319,166.477 203.778,152.506 203.778,152.506 C218.638,140.187 247.85,141.457 264.742,130.915 C281.633,120.374 249.882,169.017 249.882,169.017 M197.301,58.5214 C197.301,58.5214 185.49,48.7419 194.38,42.0106 C203.27,35.2792 223.972,35.6603 243.023,30.199 C262.074,24.7377 265.885,15.8472 280.744,22.1976 C295.604,28.5479 306.146,45.0587 299.795,56.4893 C293.445,67.9199 237.943,81.8906 223.591,80.6206 C209.24,79.3505 196.031,70.8411 197.301,58.5214 M20,293.484 C20,293.484 31.8116,261.732 53.4027,225.281 C74.9938,188.83 75.3748,181.21 76.6449,175.748 C63.9443,182.48 51.6246,200.261 43.6232,196.451 C35.6218,192.64 21.1431,177.019 23.6832,166.35 C26.2233,155.681 57.975,148.569 86.2974,131.169 C114.62,113.769 110.048,108.308 116.779,108.689 C123.51,109.07 150.69,120.12 148.912,131.931 C147.261,143.743 123.51,161.524 118.811,180.575 C129.861,182.734 153.484,195.434 150.944,215.247 C148.404,235.061 132.782,223.249 118.303,213.977 C103.951,204.706 105.983,207.627 107.253,259.319 C108.524,311.01 105.983,312.28 110.175,327.521 C114.366,342.762 111.064,351.271 111.064,351.271 C111.064,351.271 101.792,350.001 95.4419,365.623 C83.1222,369.433 78.042,355.844 78.931,314.821 C79.8201,273.798 80.2011,237.728 80.2011,237.728 C80.2011,237.728 47.4334,280.402 20,293.484 M131.766,81.3826 C131.766,81.3826 138.116,52.1711 120.716,41.6296 C103.316,31.088 74.1048,33.1201 68.2625,45.4398 C62.2932,57.7594 65.3413,72.1111 78.804,71.7301 C92.3937,71.3491 108.905,84.8118 121.986,84.0498 C135.068,83.1607 131.766,81.3826 131.766,81.3826",
	"M80.8595,289.903 C80.8595,289.903 64.3956,278.208 49.9756,286.838 C35.7826,271.623 20,276.846 20,276.846 C20,276.846 34.4201,294.559 35.3284,305.232 C36.2368,316.018 59.2861,337.138 71.776,338.841 C84.2658,340.544 96.1879,342.474 96.1879,342.474 L91.7597,336.91 C91.7597,336.91 72.9114,337.819 64.5092,331.574 C56.1069,325.215 36.4638,303.529 35.5555,293.423 C46.4557,309.546 62.806,327.032 76.4313,331.006 C53.0412,312.044 39.5295,297.851 35.7826,285.702 C54.6308,307.048 67.4613,321.582 78.0209,326.237 C53.0412,301.485 48.8401,300.917 47.7047,293.083 C63.8279,308.638 74.1604,313.407 74.1604,313.407 C74.1604,313.407 59.3997,303.415 54.1767,291.493 C65.8717,300.69 72.003,299.327 72.003,299.327 C72.003,299.327 64.7362,296.035 59.7403,290.698 C72.5708,296.035 81.6543,292.401 81.6543,292.401 L80.8595,289.903 M200.989,305.799 C200.989,305.799 220.405,281.388 222.335,258.792 C224.265,236.197 213.933,227.341 213.933,227.341 C213.933,227.341 216.998,236.992 206.666,242.669 C196.333,248.46 191.338,254.137 187.136,264.129 C197.469,228.022 197.923,214.964 189.407,201.566 C180.21,210.423 178.28,205.767 173.284,197.365 C165.563,202.361 157.956,198.955 156.82,186.238 C144.103,191.574 129.57,184.308 129.57,187.827 C129.57,191.347 144.103,198.16 144.103,198.16 C144.103,198.16 141.832,199.295 136.042,202.361 C149.894,204.291 160.227,202.361 160.227,202.361 C160.227,202.361 149.099,207.357 141.832,213.488 C165.677,204.632 169.083,203.837 169.083,203.837 L150.235,226.432 L173.625,206.449 L158.296,235.289 L177.826,211.899 L168.175,239.149 L180.892,214.17 L173.171,241.761 L186.569,213.375 C194.971,227.908 178.507,263.675 178.507,263.675 L186.342,271.509 C186.342,271.509 191.905,254.818 200.762,251.298 C192.359,263.561 190.77,267.762 190.77,267.762 L206.552,250.049 C206.552,250.049 201.556,263.107 198.831,265.832 C208.483,256.976 212.23,249.709 212.23,249.709 C212.23,249.709 208.823,263.561 204.509,267.422 C213.706,258.565 216.431,251.298 216.431,251.298 C216.431,251.298 213.706,270.487 208.71,275.824 C216.204,265.605 219.837,257.43 219.837,257.43 C219.837,257.43 212.003,290.585 200.308,299.668 ZM80.6324,219.847 L80.2917,216.44 C80.2917,216.44 74.9552,213.715 70.6405,204.178 C70.9812,223.367 65.6446,226.092 63.1466,231.655 C60.6487,237.219 61.557,245.054 68.4832,251.866 C75.4094,258.565 78.8157,259.587 78.8157,259.587 L79.1563,252.434 C79.1563,252.434 68.5967,244.599 67.2342,234.721 C73.0249,228.59 73.5927,216.895 73.5927,216.895 L80.6324,219.847 M78.3615,131.283 C81.7678,156.603 71.4353,154.673 70.6405,170.796 C69.8457,186.919 73.3656,203.383 79.0428,211.899 C80.6324,201.112 70.1863,180.447 73.7062,171.931 C77.1125,163.529 83.3574,150.472 84.0387,146.952 C84.8335,143.091 89.3752,154.673 89.3752,154.673 L90.17,153.083 C90.2836,153.197 92.2138,135.597 78.3615,131.283 M263.324,55.6625 C246.86,54.0729 233.008,62.9293 233.008,62.9293 C233.008,62.9293 218.02,59.8636 209.959,64.8595 C200.308,59.8636 186.909,64.5189 186.909,64.5189 C186.909,64.5189 196.106,58.3876 197.696,50.3259 C213.819,49.1905 221.881,41.9237 224.152,37.2684 C241.865,38.4038 241.865,30.3422 247.996,25.8005 C254.127,21.1452 265.709,21.94 265.709,21.94 C265.709,21.94 240.729,15.8086 224.606,25.3463 C204.282,27.2766 152.392,42.605 120.146,86.4329 C87.8992,130.147 75.6364,201.226 77.5667,251.526 C79.4969,301.825 80.2917,340.203 116.285,374.72 C152.392,409.238 170.445,413.893 173.511,413.098 C176.577,412.303 188.045,415.029 200.762,386.188 C213.479,357.348 200.762,290.244 192.7,278.322 C184.638,266.4 148.986,242.215 135.928,213.034 C122.871,183.853 109.813,156.262 125.596,124.016 C125.596,124.016 122.53,142.41 129.797,147.86 C125.596,160.577 129.797,166.708 133.657,168.639 C124.46,172.045 116.739,175.905 144.444,186.692 C144.444,186.692 126.391,152.175 152.846,124.129 C179.302,96.0841 197.355,93.4726 230.397,88.8173 C263.438,84.162 275.701,72.6941 285.238,61.2261 C294.889,49.7582 310.218,46.6925 325.206,44.7623 C301.361,38.0632 271.045,50.6666 263.324,55.6625 M116.172,132.191 C109.018,124.243 101.184,127.763 101.184,127.763 C103.114,118.225 117.307,124.356 116.172,132.191 M113.56,144.681 C104.931,137.755 96.3014,142.41 96.3014,142.41 C99.9348,134.803 111.062,133.44 113.56,144.681 M111.289,160.123 C104.136,154.559 91.8732,158.079 91.8732,158.079 C97.891,150.699 103.228,148.768 111.289,160.123 M114.241,173.521 C100.162,165.8 88.8075,174.77 88.8075,174.77 C91.7597,164.665 103.341,162.167 114.241,173.521 M112.652,184.989 C100.162,180.106 88.3533,191.007 88.3533,191.007 C88.4669,181.81 105.953,176.473 112.652,184.989 M101.979,208.038 C88.4669,205.427 82.5626,214.397 82.5626,214.397 C82.9032,207.811 91.8732,197.819 101.979,208.038 M103.228,222.572 C86.9908,219.847 81.2001,230.066 81.2001,230.066 C86.6502,216.668 91.8732,216.44 103.228,222.572 M104.136,236.311 C95.7337,233.245 79.8376,245.848 79.8376,245.848 C80.1782,237.9 90.3971,229.498 104.136,236.311 M109.132,249.822 C90.3971,249.936 80.0647,265.378 80.0647,265.378 C80.1782,257.884 92.4409,241.761 109.132,249.822 M183.73,370.179 C183.73,370.179 182.027,371.201 181.913,371.201 C176.123,364.615 170.673,354.056 187.818,348.833 C189.067,339.635 199.172,341.679 199.172,341.679 C199.172,341.679 193.722,343.496 191.792,352.466 C177.258,357.916 183.73,370.179 183.73,370.179 M187.931,386.756 C187.931,388.686 186.455,390.276 184.638,390.276 C182.822,390.276 181.346,388.686 181.346,386.756 C181.346,384.826 182.822,383.236 184.638,383.236 C186.455,383.123 187.931,384.712 187.931,386.756 M186.796,399.473 C176.236,407.875 163.746,400.381 163.746,400.381 C163.746,400.381 175.669,398.111 186.796,399.473 M151.03,352.579 C149.894,347.697 143.422,342.701 143.422,342.701 C143.422,342.701 155.231,341.452 155.117,349.287 C168.061,351.33 171.694,362.344 163.179,370.179 C163.86,359.392 162.384,355.191 151.03,352.579 M152.506,308.524 C139.562,302.62 128.207,310.228 128.207,310.228 C133.43,301.371 143.99,298.76 152.506,308.524 M111.062,291.947 C114.468,284.794 124.46,277.868 133.998,287.746 C122.303,282.069 111.062,291.947 111.062,291.947 M153.868,316.473 C163.746,315.337 168.402,322.49 168.402,322.49 C168.402,322.49 165.79,320.901 156.934,320.901 C147.964,320.901 141.265,324.648 141.265,324.648 C141.265,324.648 143.99,317.608 153.868,316.473 M167.039,383.577 C169.083,383.577 170.105,385.28 170.105,387.21 C170.105,389.141 169.083,390.503 167.039,390.503 C164.995,390.503 163.406,388.913 163.406,387.097 C163.406,385.053 164.995,383.577 167.039,383.577 M159.772,307.275 C165.222,301.258 174.76,297.965 183.276,308.979 C170.218,300.576 159.772,307.275 159.772,307.275 M136.609,297.17 C141.946,287.519 151.143,283.885 161.703,293.537 C144.444,288.2 136.609,297.17 136.609,297.17 M131.841,278.208 C133.544,269.806 144.33,264.924 155.004,273.212 C141.832,268.671 131.841,278.208 131.841,278.208 M109.245,273.894 C111.516,266.286 119.578,261.517 132.408,269.125 C119.237,265.037 109.245,273.894 109.245,273.894 M108.337,242.896 C110.494,236.651 116.966,229.612 131.273,238.582 C120.373,234.835 108.337,242.896 108.337,242.896 M109.813,267.308 C90.0565,266.627 81.4272,283.431 81.4272,283.431 C81.0865,276.846 89.3752,261.858 109.813,267.308 M111.743,283.204 C94.9389,282.296 83.8116,298.76 83.8116,298.76 C82.6762,290.698 94.1441,277.186 111.743,283.204 M87.1044,314.315 C87.5585,305.572 97.6639,294.559 114.582,299.441 C97.2098,299.441 87.1044,314.315 87.1044,314.315 M94.3712,328.962 C93.917,318.743 105.726,305.459 123.211,311.931 C100.503,314.315 94.3712,328.962 94.3712,328.962 M101.411,339.863 C101.411,339.863 105.498,317.267 130.819,323.058 C111.289,323.626 101.411,339.863 101.411,339.863 M116.512,371.314 C116.512,371.314 107.769,356.667 110.721,349.854 C113.787,343.042 120.032,340.544 132.749,346.562 C121.395,345.426 114.355,347.016 116.739,359.619 C119.237,372.336 119.351,374.153 116.512,371.314 M133.203,381.533 C134.906,379.035 136.496,375.288 134.111,372.109 C131.727,368.816 128.434,369.725 126.05,371.087 C127.526,368.135 129.57,366.318 133.09,366.318 C137.291,366.318 139.562,369.497 139.562,373.812 C139.562,377.673 136.837,380.852 133.203,381.533 M152.733,392.206 C137.518,382.896 141.265,374.607 141.832,363.707 C142.4,352.807 123.552,357.802 123.552,357.802 L121.395,358.37 C121.395,358.37 122.871,354.169 130.932,352.352 C138.994,350.536 143.876,356.667 146.374,363.025 C148.872,369.384 144.33,370.633 146.488,377.673 C148.645,384.712 155.798,391.298 155.798,391.298 C155.798,391.298 156.934,392.206 152.733,392.206 M173.738,410.827 C166.017,410.827 156.48,402.425 156.48,402.425 C173.171,410.714 179.529,407.648 189.521,400.722 C187.136,406.626 181.459,410.827 173.738,410.827 M203.033,355.191 C203.033,355.191 193.381,358.03 197.469,366.545 C201.556,375.061 198.718,383.123 198.718,383.123 C198.718,383.123 199.059,384.372 197.242,382.101 C196.901,366.886 193.381,370.86 191.792,360.982 C190.202,351.103 204.054,349.514 204.054,349.514 L203.033,355.191 M199.399,323.626 C199.399,323.626 196.22,320.901 187.931,320.219 C179.529,319.538 175.101,323.058 175.101,323.058 C175.101,323.058 177.826,315.564 187.591,316.132 C197.355,316.7 199.399,323.626 199.399,323.626 M192.246,297.057 C178.621,288.541 169.197,295.467 169.197,295.467 C176.577,286.043 186.342,287.178 192.246,297.057 M183.844,281.955 C172.149,273.894 159.772,279.911 159.772,279.911 C165.109,272.645 178.394,269.92 183.844,281.955 M171.354,261.631 C158.296,255.613 147.623,264.242 147.623,264.242 C151.03,258.338 157.956,249.936 171.354,261.631 M150.916,251.071 C135.701,247.438 126.277,256.635 126.277,256.635 C128.548,248.233 140.811,243.01 150.916,251.071 M135.02,223.707 C123.665,219.393 109.813,228.022 109.813,228.022 C112.084,223.026 124.46,211.558 135.02,223.707 M104.59,215.532 C103,208.72 117.988,201.907 126.958,209.968 C114.582,205.881 104.59,215.532 104.59,215.532 M118.897,195.776 C109.018,191.12 98.4587,201.68 98.4587,201.68 C94.1441,194.413 110.608,187.714 118.897,195.776 M124.574,120.269 C119.919,112.094 106.861,115.614 106.861,115.614 C110.608,107.893 125.596,110.05 124.574,120.269 M130.592,155.467 C133.203,148.655 134.906,149.677 136.042,157.171 C133.09,152.175 130.592,155.467 130.592,155.467 M131.727,176.814 C130.705,170.342 137.177,169.774 137.518,177.836 C132.749,173.18 131.727,176.814 131.727,176.814 M139.107,142.069 C137.972,135.824 128.434,136.165 128.434,136.165 C132.863,131.623 139.902,132.077 139.107,142.069 M128.775,122.086 C129.797,115.273 145.466,113.343 147.396,125.492 C140.811,117.771 128.775,122.086 128.775,122.086 M203.827,88.3631 C191.11,90.634 163.179,104.146 157.388,111.412 C140.47,106.757 129.002,115.273 129.002,115.273 C129.002,115.273 129.002,103.351 115.604,104.146 C125.936,79.6202 140.924,68.8336 140.924,68.8336 C140.924,68.8336 131.273,84.9568 131.727,94.9486 C171.24,23.9838 238.799,29.3203 238.799,29.3203 C238.799,29.3203 145.125,39.6528 134.793,102.215 C153.982,64.6325 177.031,61.5668 177.031,61.5668 C177.031,61.5668 152.506,72.6941 140.129,100.739 C164.314,70.0826 172.716,65.0866 190.089,67.3575 C207.347,69.6284 236.869,70.0826 256.512,62.3616 C243.114,73.4889 213.138,71.5586 203.487,71.218 C193.836,70.8774 160.454,74.2837 148.986,100.058 C180.097,71.6722 211.889,77.8035 211.889,77.8035 C211.889,77.8035 171.24,77.4629 159.659,99.7175 C188.84,75.192 205.758,86.3193 228.012,82.7995 C250.267,79.3931 269.456,73.1482 277.177,61.6803 C260.259,87.5683 216.544,85.9787 203.827,88.3631",
	"M193.568,20.0002 C289.165,20.1384 366.721,98.178 366.375,193.913 C366.03,289.095 288.059,366.651 192.808,366.443 C97.2804,366.167 19.6555,287.989 20.0011,192.392 C20.3468,97.0721 98.1099,19.8619 193.568,20.0002 M192.877,263.589 C193.085,266.492 193.292,268.842 193.361,271.123 C193.499,290.201 193.568,309.348 193.638,328.426 C193.638,338.863 190.734,341.49 180.435,340.592 C103.294,334.232 44.125,268.635 45.1618,190.664 C46.1296,113.662 107.718,49.5156 184.582,45.2991 C255.364,41.4282 319.234,87.9479 336.583,156.172 C354.21,225.087 320.893,296.215 256.47,326.974 C253.913,328.219 251.079,328.979 248.867,330.707 C247.553,331.744 246.24,334.509 246.724,335.822 C247.208,337.066 250.18,338.38 251.701,338.034 C254.88,337.412 257.922,335.822 260.894,334.44 C329.326,301.745 364.232,224.327 343.772,150.919 C323.312,77.7868 253.36,30.2995 177.325,37.903 C87.1885,46.9581 23.6647,130.389 39.079,219.627 C51.3138,290.616 107.649,342.25 180.435,349.439 C183.822,349.785 187.347,351.651 190.251,353.587 C195.227,356.974 200.066,357.527 204.421,353.448 C208.845,349.301 208.499,344.532 205.25,339.416 C203.522,336.652 202.001,333.126 201.932,329.947 C201.448,309.694 201.518,289.372 201.034,269.119 C200.895,263.451 202.693,260.478 207.946,257.852 C225.849,248.866 235.249,230.133 232.761,210.295 C230.273,190.941 216.31,175.112 197.232,170.757 C192.462,169.651 187.416,169.513 182.509,169.029 C161.979,166.886 147.602,150.089 148.5,129.145 C149.261,109.998 165.505,94.0998 184.928,93.6159 C205.25,93.0629 222.047,107.855 223.913,127.97 C224.121,130.458 224.397,133.016 224.674,136.265 C233.798,136.265 242.231,136.126 250.733,136.265 C279.212,136.749 304.165,157.969 308.312,185.342 C312.805,214.581 296.561,241.884 269.189,251.423 C264.903,252.944 261.309,253.981 257.161,249.695 C252.461,244.857 244.305,246.515 240.295,251.838 C236.355,257.022 237.116,264.142 242.023,268.427 C246.931,272.644 253.843,272.022 258.82,267.805 C262.207,264.971 266.078,262.206 270.226,260.893 C298.428,251.838 318.197,225.502 318.404,195.987 C318.611,166.817 299.672,139.583 271.677,131.011 C262.207,128.108 251.77,127.763 241.678,127.417 C235.457,127.21 232.968,125.758 231.379,119.33 C224.881,93.6159 198.338,79.031 172.832,86.4963 C147.947,93.8233 133.708,120.436 141.45,145.458 C147.602,165.504 163.915,177.116 188.246,178.637 C204.49,179.674 217.623,189.904 222.323,205.111 C227.024,220.249 221.909,236.7 209.328,246.308 C207.255,247.898 204.766,249.073 201.518,251.008 C201.31,247.068 201.103,244.511 200.965,242.022 C199.789,223.29 186.38,207.254 168.2,203.175 C163.362,202.139 158.316,202.208 153.477,201.378 C138.685,199.028 127.003,191.908 119.469,178.637 C117.257,174.697 116.911,171.448 120.437,167.232 C122.787,164.467 123.547,158.522 122.165,155.135 C120.99,152.163 115.736,148.914 112.487,149.052 C108.824,149.191 105.16,152.785 101.912,155.412 C99.3541,157.485 97.7643,161.011 94.9993,162.67 C75.9906,174.282 65.2074,195.918 68.3871,216.585 C72.8109,244.787 94.5155,263.589 123.271,263.727 C146.219,263.727 169.099,263.589 192.877,263.589 M152.924,254.465 C142.348,254.465 131.704,254.672 121.128,254.395 C100.806,253.842 83.3176,239.672 78.479,220.18 C73.7787,201.171 82.4881,180.434 99.1467,170.826 C105.091,167.439 107.511,168.269 109.653,174.559 C116.635,194.673 134.399,208.291 155.758,209.327 C167.647,209.88 177.947,213.406 185.55,222.945 C191.287,230.133 193.015,238.497 193.292,247.414 C193.499,252.322 191.495,254.257 186.794,254.257 C175.458,254.188 164.191,254.257 152.855,254.257 C152.924,254.326 152.924,254.395 152.924,254.465",
	"M66.291,20 L390.328,20 L390.328,297.746 L344.037,297.746 L344.037,344.037 L20,344.037 L20,66.291 L66.291,66.291 L66.291,20 M320.892,112.582 L320.892,89.4365 L43.1455,89.4365 L43.1455,112.582 L320.892,112.582 M320.892,320.892 L320.892,135.728 L43.1455,135.728 L43.1455,320.892 L320.892,320.892 M182.019,158.873 L182.019,297.746 L66.291,297.746 L66.291,158.873 L182.019,158.873 M367.183,274.601 L367.183,43.1455 L89.4365,43.1455 L89.4365,66.291 L344.037,66.291 L344.037,274.601 L367.183,274.601 M158.873,274.601 L158.873,182.019 L89.4365,182.019 L89.4365,274.601 L158.873,274.601 M274.601,158.873 L274.601,182.019 L205.164,182.019 L205.164,158.873 L274.601,158.873 M274.601,205.164 L274.601,228.31 L205.164,228.31 L205.164,205.164 L274.601,205.164 M251.455,251.455 L251.455,274.601 L205.164,274.601 L205.164,251.455 L251.455,251.455",
	"M206.529,206.529 L46.6469,206.529 C46.6469,294.779 118.278,366.41 206.529,366.41 C294.779,366.41 366.41,294.779 366.41,206.529 C366.41,118.278 294.779,46.6469 206.529,46.6469 L206.529,206.529 M179.882,179.882 L179.882,20 C91.6318,20 20,91.6318 20,179.882 L179.882,179.882",
	"M187.712,20.0076 C193.396,19.9832 199.074,20.3568 204.706,21.1256 C210.007,21.8628 215.241,23.0217 220.358,24.5914 C225.496,26.1803 230.505,28.1613 235.339,30.5168 C240.438,33.0105 245.401,35.7721 250.208,38.79 C258.168,43.9225 266.59,48.3016 275.363,51.8706 C283.622,55.1995 292.15,57.8177 300.853,59.6965 C309.625,61.57 318.515,62.84 327.462,63.4977 Q340.878,64.7275 355.412,64.7275 L355.412,154.167 C355.5,170.518 353.357,186.805 349.039,202.577 C344.84,217.667 338.913,232.224 331.375,245.955 C323.82,259.706 314.907,272.665 304.766,284.637 C294.409,296.784 283.201,308.18 271.226,318.736 C259.173,329.414 246.48,339.347 233.215,348.475 Q213.202,362.226 192.967,373.965 L187.712,377.767 L182.346,374.636 Q162.11,363.456 142.098,349.146 C128.828,340.023 116.134,330.091 104.086,319.407 C92.1062,308.857 80.8975,297.461 70.546,285.308 C60.4021,273.339 51.4879,260.379 43.9377,246.626 C36.395,232.897 30.4674,218.34 26.2734,203.247 C21.923,187.257 19.8159,170.738 20.0126,154.167 L20.0126,64.7275 Q34.5466,64.7275 48.1861,63.7213 C57.1319,63.0629 66.0221,61.7929 74.7944,59.9201 C83.4984,58.0413 92.0261,55.4231 100.285,52.0942 C109.058,48.5252 117.479,44.1461 125.44,39.0136 C134.613,32.8798 144.581,28.0276 155.067,24.5914 C165.654,21.4224 176.661,19.8769 187.712,20.0076 M333.052,87.0874 C316.162,86.2369 299.428,83.423 283.189,78.7025 C266.975,73.8969 251.536,66.7804 237.351,57.5723 C230.009,52.7614 222.031,48.9984 213.65,46.3924 C205.249,43.7825 196.508,42.4263 187.712,42.3676 C178.938,42.2813 170.198,43.4867 161.775,45.9452 C153.392,48.5485 145.414,52.3116 138.073,57.1251 C123.888,66.3332 108.45,73.4497 92.2352,78.2553 C76.0138,83.1263 59.2801,86.0903 42.3725,87.0874 L42.3725,154.167 C42.3071,168.568 44.2641,182.906 48.1861,196.763 C52.2225,210.348 57.7728,223.436 64.7325,235.781 C71.5746,248.234 79.6659,259.959 88.8812,270.774 C98.0172,281.744 107.878,292.09 118.396,301.743 C129.009,311.408 140.211,320.407 151.936,328.687 Q169.601,341.096 187.488,351.046 Q205.265,340.761 223.041,328.687 C234.762,320.401 245.963,311.402 256.581,301.743 C267.287,292.103 277.333,281.758 286.655,270.774 C295.823,259.949 303.878,248.224 310.692,235.781 C317.444,223.444 322.806,210.395 326.679,196.875 C330.797,183.008 332.941,168.632 333.052,154.167 L333.052,87.0874",
	"M353.455,77.5263 C353.455,77.5263 369.27,101.953 336.632,181.363 C303.503,261.972 254.26,275.918 254.26,275.918 C254.26,275.918 252.674,232.957 247.452,223.096 C242.232,213.234 272.243,177.882 276.303,148.297 C280.727,116.068 272.822,87.3879 272.822,87.3879 C272.822,87.3879 311.119,65.286 331.412,68.8249 C350.858,72.216 353.455,77.5263 353.455,77.5263 M242.078,182.523 C223.553,124.353 156.181,112.679 108.223,151.354 C60.2668,190.028 64.7565,266.858 153.087,275.113 C235.851,282.849 234.69,169.145 155.794,178.039 C75.5963,187.081 129.494,257.71 165.462,234.504 C201.429,211.299 155.407,189.641 141.871,203.564 C128.335,217.487 148.059,222.515 155.407,219.422 C162.755,216.328 152.313,212.073 151.926,208.206 C151.539,204.338 174.744,207.045 167.009,218.648 C159.275,230.251 138.39,232.184 131.042,214.78 C123.693,197.376 155.794,186.934 177.838,194.283 C199.883,201.631 196.25,249.814 158.545,252.134 C120.838,254.454 99.3282,239.919 98.7948,203.407 C98.277,167.981 168.987,137.856 204.372,169.181 C239.757,200.505 249.038,254.454 206.112,290.421 C163.185,326.386 76.171,304.922 55.2878,241.692 C34.4044,178.462 68.1095,128.105 112.138,99.5698 C156.953,70.5235 255.42,89.7082 255.42,89.7082 C255.42,89.7081 262.38,103.63 260.64,134.955 C258.901,166.281 242.078,182.523 242.078,182.523 M380.139,111.171 C378.498,97.8774 373.406,82.9157 363.053,69.0149 C336.812,33.7841 276.758,5.37156 153.323,28.2184 C-15.3726,59.4425 -9.10742,283.263 89.5132,332.767 C179.557,377.965 262.338,338.695 302.989,293.109 C306.86,288.768 310.351,284.368 313.429,279.979 C348.815,229.511 385.123,151.538 380.139,111.171",
	"M307.08,327.103 C303.203,343.717 300.584,378.847 275.104,373.605 C238.939,366.16 105.672,340.194 48.6861,327.436 C14.9667,319.886 16.2104,310.251 26.0765,296.775 C45.4786,270.263 99.2022,226.337 114.164,211.249 C136.479,188.746 130.759,188.825 119.547,161.962 C102.795,121.833 76.9304,64.3626 70.8427,44.9003 C68.4076,37.1106 72.2226,15.4436 108.17,20.8584 C144.123,26.2758 301.565,55.8503 331.975,61.6892 C358.876,66.8579 362.493,75.5351 356.172,107.623 C348.848,144.809 353.887,151.038 326.155,145.404 C301.054,140.303 303.964,144.815 307.657,122.962 C310.257,107.594 307.97,105.686 252.382,96.7963 C144.432,79.5334 140.373,71.3798 157.733,116.264 C196.576,216.705 203.492,198.583 145.055,255.143 C106.073,292.87 104.874,285.558 206.779,306.098 C262.836,317.394 259.74,319.619 263.557,303.717 C269.045,280.868 271.927,284.6 292.352,289.131 C313.507,293.828 313.919,297.798 307.08,327.103",
	"M193.205,20 C288.863,20 366.41,97.5465 366.41,193.205 C366.41,288.863 288.863,366.41 193.205,366.41 C97.5465,366.41 20,288.863 20,193.205 C20,97.5465 97.5465,20 193.205,20 M89.3056,157.673 L89.3056,198.022 C115.646,198.038 140.56,208.385 159.204,227.058 C177.844,245.671 188.149,270.623 188.191,297.054 L188.205,297.054 L188.205,297.128 L228.719,297.128 C228.688,258.692 213.065,223.878 187.806,198.6 C162.543,173.329 127.743,157.696 89.3056,157.673 M97.5136,288.664 L97.5043,288.664 L97.5136,288.672 L97.5136,288.664 C102.62,293.749 109.582,296.867 117.332,296.867 C125.092,296.867 132.07,293.758 137.179,288.672 L137.197,288.664 C142.297,283.571 145.41,276.635 145.429,268.927 C145.41,261.205 142.297,254.269 137.179,249.157 L137.188,249.157 L137.179,249.15 L137.179,249.157 C132.063,244.075 125.092,240.935 117.332,240.935 C109.584,240.935 102.623,244.068 97.5136,249.157 L97.5136,249.15 C92.4188,254.253 89.282,261.205 89.282,268.927 C89.282,276.645 92.4188,283.573 97.5136,288.664 M89.3783,128.951 C181.994,129.018 257.282,204.424 257.345,297.128 L297.128,297.128 C297.1,239.832 273.813,187.921 236.177,150.26 C198.529,112.61 146.653,89.3084 89.3783,89.2829 L89.3783,128.951",
};
const string LB[20] = {
	"House", "Heart", "Car", "Tool", "Cloud", "Head", "Duck", "Hat", "S", "IE Logo", "Flower", "\"Fu\"", "Fish", "Logo", "Windows", "Sector", "Shield", "Shell", "Sigma", "WiFi"
};



//================================= Rendering =================================//

#include <chrono>
#include <thread>

void bezier_main(const string &S, string filepath) {
	auto t0 = chrono::high_resolution_clock::now();

	vector<spline3> v;
	fromPath(S, v);

	const int W = 600, H = 450;
	COLOR* C = new COLOR[W*H];
	for (unsigned i = 0, l = W * H; i < l; i++) C[i].r = C[i].g = C[i].b = 255;
	vec2 Max, Min;
	getRange(v, Min, Max);
	int AreaC = 0;
	double Area = calcArea(v);
	int x0 = max(0, (int)floor(Min.x)), x1 = min(W - 1, (int)ceil(Max.x)),
		y0 = max(0, (int)floor(Min.y)), y1 = min(H - 1, (int)ceil(Max.y));
	for (int i = x0; i <= x1; i++) {
		for (int j = y0; j <= y1; j++) {
			C[j*W + i] = toCOLOR(0.8);
			vec2 P = vec2(i, j) + _INT_DIR;
			int ct = 0;
			for (unsigned d = 0; d < v.size(); d++) ct += intersections(v[d], P);
			if (ct & 1) C[j*W + i] = toCOLOR(0.5), AreaC++;
		}
	}

	for (unsigned i = 0; i < v.size(); i++) rasterize(v[i], C, W, H, vec2(0, 0), 1.0, 30);

	auto t1 = chrono::high_resolution_clock::now();
	double time_elapsed = chrono::duration<double>(t1 - t0).count();
	printf("%.3lf secs\tArea = %d, %.2lf: %.3lf\n", time_elapsed, AreaC, Area, Area / AreaC);

	FILE *fp = fopen(&filepath[0], "wb");
	if (fp == 0) printf("\aOpen File Failed!\n\n");
	else {
		svpng(fp, W, H, (unsigned char*)C, false);
		fclose(fp);
	}

	delete C;
	return;
}



#define IMG_W 600
#define IMG_H 400
#define SCALE 100.0
#define CENTER vec2(0.0, 0.0)
#define SAMPLE 256
#define MAX_RECURSION 50
#define MIN_ERROR 0.01
#define BULB 2.0
#define INDEX 1.5

vector<spline3> Obj;

bool init(const string &S) {
	Obj.clear();
	if (!fromPath(S, Obj)) return false;
	vec2 Min = vec2(INFINITY, INFINITY), Max = -Min;
	for (unsigned i = 0; i < Obj.size(); i++) {
		Obj[i].calcRange();
		if (Obj[i].Max.x > Max.x) Max.x = Obj[i].Max.x;
		if (Obj[i].Max.y > Max.y) Max.y = Obj[i].Max.y;
		if (Obj[i].Min.x < Min.x) Min.x = Obj[i].Min.x;
		if (Obj[i].Min.y < Min.y) Min.y = Obj[i].Min.y;
	}
	vec2 C = (Max + Min)*0.5;
	double A1 = calcArea(Obj), A2 = (Max.x - Min.x)*(Max.y - Min.y), A = 2.0 / pow(A1*A2, 0.25);
	mat2x3 T = mat2x3(A, 0, 0, -A)*mat2x3(-C.x, -C.y);
	for (unsigned i = 0; i < Obj.size(); i++) Obj[i].applyMatrix(T), Obj[i].calcRange();
	return true;
}

bool intBulb(vec2 p, vec2 d, double &t) {
	p = p - vec2(3.0, 3.0);
	double a = dot(d, d), b = -dot(p, d) / a, c = (dot(p, p) - 1) / a;
	double delta = b * b - c; if (delta < 0) return false;
	delta = sqrt(delta);
	double x1 = b + delta, x2 = b - delta;
	bool u = x1 < 1e-6, v = x2 < 1e-6;
	if (u && v) return false;
	t = u ? x2 : v ? x1 : x1 < x2 ? x1 : x2;
	return true;
}

bool intObj(vec2 p, vec2 d, double &t, vec2 &n) {
	t = INFINITY;
	int dir = -1; double tp, tt;
	for (unsigned i = 0, l = Obj.size(); i < l; i++) {
		if (intersect(Obj[i], p, d, t, tt)) dir = i, tp = tt;
	}
	if (dir == -1) return false;
	n = (Obj[dir].A*tp + Obj[dir].B*2.0)*tp + Obj[dir].C;
	n = normalize(vec2(-n.y, n.x));
	return true;
}
bool inObj(const vec2 &p) {
	return inside(Obj, p);
}

int trace;
double traceRay(vec2 p, vec2 d, int N, double dm) {
	if (trace) {
		if (inObj(p)) return 0.0;
		if (trace == 1) return 1.0;
		vec2 n; if (intObj(p, d, dm, n)) return 1.0;
		return 0.0;
	}
	if (dm < MIN_ERROR) return 0.0f;
	if (N >= MAX_RECURSION) return 0.0;
	p = p + d * 1e-6;
	double t, tb; vec2 n;
	if (intObj(p, d, t, n)) {
		if (intBulb(p, d, tb) && tb <= t) return BULB;
		vec2 q = p + d * t;
		double R;
		if (inObj(p)) {
			vec2 r = refract(d, n, INDEX, 1.0, R);
			if (R == -1) return traceRay(q, reflect(d, n), N + 1, dm);
			double ot = traceRay(q, reflect(d, n), N + 1, R * dm);
			double it = traceRay(q, r, N + 1, (1.0 - R) * dm);
			return R * ot + (1.0 - R) * it;
		}
		else {
			vec2 r = refract(d, n, 1.0, INDEX, R);
			double ot = traceRay(q, reflect(d, n), N + 1, R * dm);
			double it = traceRay(q, r, N + 1, (1.0 - R) * dm);
			return R * ot + (1.0 - R) * it;
		}
	}
	if (intBulb(p, d, t)) return BULB;
	return 0.0;
}


void light2d_main(const string &s, string filepath) {
	init(s);

	COLOR *img = new COLOR[IMG_W*IMG_H];

	auto t0 = chrono::high_resolution_clock::now();

	const unsigned L = IMG_W * IMG_H;
	const unsigned MAX_THREADS = thread::hardware_concurrency();
	const unsigned ppt = 0x1000;
	const unsigned N = L / ppt;

	auto task = [&](unsigned beg, unsigned end, bool* sig) {
		vec2 p;
		for (unsigned i = beg; i < end; i++) {
			p = vec2(i % IMG_W - 0.5*IMG_W, 0.5*IMG_H - (i / IMG_W + 1)) * (1.0 / SCALE) + CENTER * 0.5 + _INT_DIR;
			double c = 0;
			double s = 1.0 / (SCALE * RAND_MAX), h = -0.5 / SCALE;
			for (int i = 0; i < SAMPLE; i++) {
				double a = 2.0 * PI * double(i + rand() / double(RAND_MAX)) / SAMPLE;
				vec2 d = vec2(cos(a), sin(a));
				c += traceRay(p + vec2(s * rand() + h, s * rand() + h), d, 0, 1.0);
			}
			img[i] = toCOLOR(c / SAMPLE);
		}
		*sig = true;
	};

	bool* fn = new bool[MAX_THREADS]; for (unsigned i = 0; i < MAX_THREADS; i++) fn[i] = false;
	thread** T = new thread*[MAX_THREADS]; for (unsigned i = 0; i < MAX_THREADS; i++) T[i] = NULL;

	unsigned released = 0, finished = 0;
	while (finished < N) {
		for (unsigned i = 0; i < MAX_THREADS; i++) {
			if (fn[i]) {
				fn[i] = false;
				delete T[i]; T[i] = 0;
				if (++finished >= N) break;
				printf("\r%d / %d", finished, N);
			}
			if (!fn[i] && !T[i] && released < N) {
				T[i] = new thread(task, ppt * released, ppt * (released + 1), fn + i);
				T[i]->detach();
				released++;
			}
		}
		this_thread::sleep_for(0.001s);
	}
	task(N*ppt, L, fn);
	printf("\r%d / %d\n", N, N);

	delete fn;
	delete T;

	auto t1 = chrono::high_resolution_clock::now();
	double time_elapsed = chrono::duration<double>(t1 - t0).count();
	printf("%lfsecs elapsed. (%lffps)\n", time_elapsed, 1.0 / time_elapsed);

	FILE *fp = fopen(&filepath[0], "wb");
	if (fp == 0) {
		printf("\aOpen File Failed!\n\n");
		exit(0);
	}
	svpng(fp, IMG_W, IMG_H, (unsigned char*)img, false);
	fclose(fp);

	delete img;
	return;
}

int main() {
	for (int i = 0; i < 20; i++) {
		printf("%s\n", &LB[i][0]);
		string n = "00"; n[0] += i / 10, n[1] += i % 10;
		bezier_main(S[i], "test" + n + "_0.png");
		trace = 1;
		light2d_main(S[i], "test" + n + "_1.png");
		trace = 2;
		light2d_main(S[i], "test" + n + "_2.png");
		trace = 0;
		light2d_main(S[i], "test" + n + "_3.png");
		printf("\n");
	}
	system("pause");
	return 0;
}
